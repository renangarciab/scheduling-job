{"version":3,"sources":["store/modules/jobs/reducer.js","store/modules/rootReducer.js","services/api.js","store/modules/jobs/sagas.js","store/modules/jobs/actions.js","store/modules/rootSaga.js","store/index.js","mocks/jobs.js","helpers/date.js","components/Jobs/index.js","helpers/jobs.js","App.js","index.js"],"names":["INITIAL_STATE","combineReducers","jobs","state","action","type","payload","api","axios","create","baseURL","getJobs","call","get","response","put","data","rootSaga","all","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","store","createStore","rootReducer","run","mockJobs","list","id","description","deadline","duration","job","listToOrder","Date","listReodered","dateMatched","deadlineMatched","dateFormat","date","format","locale","pt","orderDateMatched","dateA","dateB","orderDate","Jobs","useState","jobsList","setJobsList","handlerLoadJobs","compareList","groupArray","i","filter","item","push","length","group","index","self","findIndex","found","sort","returnJobsList","Container","fluid","Button","className","onClick","data-testid","map","jobGroup","ListGroup","ListGroupItemHeading","ListGroupItem","Table","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40a8557d.chunk.js","sourcesContent":["export const INITIAL_STATE = [];\n\nexport default function jobs(state = INITIAL_STATE, action) {\n\tswitch (action.type) {\n\t\tcase 'SUCCESS_JOBS':\n\t\t\treturn [action.payload];\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { combineReducers } from 'redux';\n\nimport jobs from './jobs/reducer';\n\nexport default combineReducers({\n\tjobs,\n});\n","import axios from 'axios';\n\nconst api = axios.create({\n\tbaseURL: 'http://fakehost:171',\n});\n\nexport default api;\n","import { call, put } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { successJobs, failJobs } from './actions';\n\nexport function* getJobs() {\n\ttry {\n\t\tconst response = yield call(api.get, 'jobs');\n\n\t\tyield put(successJobs(response.data));\n\t} catch (error) {\n\t\tyield put(failJobs(error));\n\t}\n}\n","export function requestJobs() {\n\treturn { type: 'REQUEST_JOBS' };\n}\n\nexport function successJobs(data) {\n\treturn { type: 'SUCCESS_JOBS', payload: data };\n}\n\nexport function failJobs() {\n\treturn { type: 'FAIL_JOBS' };\n}\n","import { all } from 'redux-saga/effects';\n\nimport * as jobs from './jobs/sagas';\n\nexport default function* rootSaga() {\n\treturn yield all([jobs]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './modules/rootReducer';\nimport rootSaga from './modules/rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst enhancer = applyMiddleware(sagaMiddleware);\n\nconst store = createStore(rootReducer, enhancer);\n\nsagaMiddleware.run(rootSaga);\n\nexport { store };\n","export const mockJobs = {\n\tlist: [\n\t\t{\n\t\t\tid: 1,\n\t\t\tdescription: 'Importação de arquivos de fundos',\n\t\t\tdeadline: '2019-11-11 12:00:00',\n\t\t\tduration: 2,\n\t\t},\n\t],\n\tjob: {\n\t\tid: 1,\n\t\tdescription: 'Importação de arquivos de fundos',\n\t\tdeadline: '2019-11-11 12:00:00',\n\t\tduration: 2,\n\t},\n\tlistToOrder: [\n\t\t{\n\t\t\tid: 1,\n\t\t\tdescription: 'Importação de arquivos de fundos',\n\t\t\tdeadline: new Date('2019-11-11 12:00:00'),\n\t\t\tduration: 2,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\tdescription: 'Importação de dados da Base Legada',\n\t\t\tdeadline: new Date('2019-11-13 12:00:00'),\n\t\t\tduration: 4,\n\t\t},\n\t\t{\n\t\t\tid: 3,\n\t\t\tdescription: 'Importação de dados de integração',\n\t\t\tdeadline: new Date('2019-11-11 08:00:00'),\n\t\t\tduration: 6,\n\t\t},\n\t\t{\n\t\t\tid: 4,\n\t\t\tdescription: 'Importação de dados de integração',\n\t\t\tdeadline: new Date('2019-11-12 18:00:00'),\n\t\t\tduration: 6,\n\t\t},\n\t\t{\n\t\t\tid: 5,\n\t\t\tdescription: 'Importação de dados de integração',\n\t\t\tdeadline: new Date('2019-11-12 09:00:00'),\n\t\t\tduration: 8,\n\t\t},\n\t\t{\n\t\t\tid: 6,\n\t\t\tdescription: 'Importação de dados de integração',\n\t\t\tdeadline: new Date('2019-11-12 15:00:00'),\n\t\t\tduration: 1,\n\t\t},\n\t\t{\n\t\t\tid: 7,\n\t\t\tdescription: 'Importação de dados de integração',\n\t\t\tdeadline: new Date('2019-11-12 09:00:00'),\n\t\t\tduration: 10,\n\t\t},\n\t],\n\tlistReodered: [\n\t\t{\n\t\t\tdateMatched: '11/11/2019',\n\t\t\tdeadlineMatched: new Date('2019-11-11T15:00:00.000Z'),\n\t\t\tlist: [\n\t\t\t\t{\n\t\t\t\t\tid: 1,\n\t\t\t\t\tdescription: 'Importação de arquivos de fundos',\n\t\t\t\t\tdeadline: new Date('2019-11-11T15:00:00.000Z'),\n\t\t\t\t\tduration: 2,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 3,\n\t\t\t\t\tdescription: 'Importação de dados de integração',\n\t\t\t\t\tdeadline: new Date('2019-11-11T11:00:00.000Z'),\n\t\t\t\t\tduration: 6,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tdateMatched: '12/11/2019',\n\t\t\tdeadlineMatched: new Date('2019-11-12T21:00:00.000Z'),\n\t\t\tlist: [\n\t\t\t\t{\n\t\t\t\t\tid: 4,\n\t\t\t\t\tdescription: 'Importação de dados de integração',\n\t\t\t\t\tdeadline: new Date('2019-11-12T21:00:00.000Z'),\n\t\t\t\t\tduration: 6,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 5,\n\t\t\t\t\tdescription: 'Importação de dados de integração',\n\t\t\t\t\tdeadline: new Date('2019-11-12T12:00:00.000Z'),\n\t\t\t\t\tduration: 8,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 6,\n\t\t\t\t\tdescription: 'Importação de dados de integração',\n\t\t\t\t\tdeadline: new Date('2019-11-12T18:00:00.000Z'),\n\t\t\t\t\tduration: 1,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tdateMatched: '13/11/2019',\n\t\t\tdeadlineMatched: new Date('2019-11-13T15:00:00.000Z'),\n\t\t\tlist: [\n\t\t\t\t{\n\t\t\t\t\tid: 2,\n\t\t\t\t\tdescription: 'Importação de dados da Base Legada',\n\t\t\t\t\tdeadline: new Date('2019-11-13T15:00:00.000Z'),\n\t\t\t\t\tduration: 4,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n","import { format } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\n\nexport function dateFormat(date) {\n\treturn format(date, \"dd'/'MM'/'yyyy'\", {\n\t\tlocale: pt,\n\t});\n}\n\nexport function fullDateFormat(date) {\n\treturn format(date, \"dd'/'MM'/'yyyy' 'HH:mm\", {\n\t\tlocale: pt,\n\t});\n}\n\nexport function orderDateMatched(dateA, dateB) {\n\treturn dateA.deadlineMatched - dateB.deadlineMatched;\n}\n\nexport function orderDate(dateA, dateB) {\n\treturn dateA.deadline - dateB.deadline;\n}\n","import React, { useState } from 'react';\nimport {\n\tContainer,\n\tListGroup,\n\tListGroupItem,\n\tListGroupItemHeading,\n\tTable,\n\tButton,\n} from 'reactstrap';\n\nimport { mockJobs } from '../../mocks/jobs';\nimport { fullDateFormat, orderDate } from '../../helpers/date';\nimport { returnJobsList } from '../../helpers/jobs';\n\nexport default function Jobs() {\n\tconst [jobsList, setJobsList] = useState([]);\n\n\tfunction handlerLoadJobs() {\n\t\tsetJobsList(returnJobsList(mockJobs.listToOrder));\n\t}\n\n\treturn (\n\t\t<Container fluid=\"lg\">\n\t\t\t<Button className=\"mt-5\" onClick={() => handlerLoadJobs()}>\n\t\t\t\tCarregar lista\n\t\t\t</Button>\n\t\t\t<div data-testid=\"jobs\">\n\t\t\t\t{jobsList.map((jobGroup) => (\n\t\t\t\t\t<ListGroup\n\t\t\t\t\t\tclassName=\"my-5\"\n\t\t\t\t\t\tkey={`${jobGroup.deadlineMatched}-${jobGroup.dateMatched}`}>\n\t\t\t\t\t\t<ListGroupItemHeading>\n\t\t\t\t\t\t\tTarefas do dia - {jobGroup.dateMatched}\n\t\t\t\t\t\t</ListGroupItemHeading>\n\t\t\t\t\t\t<ListGroupItem>\n\t\t\t\t\t\t\t<Table>\n\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<th className=\"border-top-0 text-center\">\n\t\t\t\t\t\t\t\t\t\t\tID\n\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t\t<th className=\"border-top-0\">\n\t\t\t\t\t\t\t\t\t\t\tDescrição\n\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t\t<th className=\"border-top-0\">Prazo</th>\n\t\t\t\t\t\t\t\t\t\t<th className=\"border-top-0 text-center\">\n\t\t\t\t\t\t\t\t\t\t\tTempo\n\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t{jobGroup.list\n\t\t\t\t\t\t\t\t\t\t.sort(orderDate)\n\t\t\t\t\t\t\t\t\t\t.map((job) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={job.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{job.id}\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{job.description}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{fullDateFormat(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjob.deadline\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{job.duration}\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</ListGroupItem>\n\t\t\t\t\t</ListGroup>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</Container>\n\t);\n}\n","import { dateFormat, orderDateMatched } from './date';\n\nexport function returnJobsList(list) {\n\tconst compareList = list;\n\tlet exportList = [];\n\tlet dateMatched = null;\n\tconst groupArray = [];\n\n\t// Função que agrupa os jobs por dia\n\tfor (let i = 0; i < list.length; i += 1) {\n\t\tdateMatched = compareList.filter(\n\t\t\t(item) =>\n\t\t\t\tdateFormat(item.deadline) === dateFormat(list[i].deadline) &&\n\t\t\t\titem.duration < 9\n\t\t);\n\n\t\tgroupArray.push({\n\t\t\tdateMatched: dateFormat(list[i].deadline),\n\t\t\tdeadlineMatched: list[i].deadline,\n\t\t\tlist: dateMatched,\n\t\t});\n\t}\n\n\t// Função que remove os agrupamentos repetidos\n\texportList = groupArray.filter(\n\t\t(group, index, self) =>\n\t\t\tindex ===\n\t\t\tself.findIndex((found) => found.dateMatched === group.dateMatched)\n\t);\n\n\treturn exportList.sort(orderDateMatched);\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './store/index';\n\nimport Jobs from './components/Jobs';\n\nexport default function App() {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<Jobs />\n\t\t</Provider>\n\t);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}